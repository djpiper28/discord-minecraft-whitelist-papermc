--- a/net/minecraft/world/item/WrittenBookItem.java
+++ b/net/minecraft/world/item/WrittenBookItem.java
@@ -113,25 +113,42 @@
 
     public static boolean resolveBookComponents(ItemStack book, @Nullable CommandSourceStack commandSource, @Nullable Player player) {
         CompoundTag compoundTag = book.getTag();
-        if (compoundTag != null && !compoundTag.getBoolean("resolved")) {
+        if (com.destroystokyo.paper.PaperConfig.resolveSelectorsInBooks && compoundTag != null && !compoundTag.getBoolean("resolved")) { // Paper
             compoundTag.putBoolean("resolved", true);
             if (!makeSureTagIsValid(compoundTag)) {
                 return false;
             } else {
                 ListTag listTag = compoundTag.getList("pages", 8);
+                // Paper start - backport length limit
+                ListTag newPages = new ListTag();
 
                 for(int i = 0; i < listTag.size(); ++i) {
-                    listTag.set(i, (Tag)StringTag.valueOf(resolvePage(commandSource, player, listTag.getString(i))));
+                    String resolvedPage = resolvePage(commandSource, player, listTag.getString(i));
+                    if (resolvedPage.length() > 32767) {
+                        return false;
+                    }
+
+                    newPages.add(i, StringTag.valueOf(resolvedPage));
                 }
 
                 if (compoundTag.contains("filtered_pages", 10)) {
                     CompoundTag compoundTag2 = compoundTag.getCompound("filtered_pages");
+                    CompoundTag newFilteredPages = new CompoundTag();
 
                     for(String string : compoundTag2.getAllKeys()) {
-                        compoundTag2.putString(string, resolvePage(commandSource, player, compoundTag2.getString(string)));
+                        String resolvedPage = resolvePage(commandSource, player, compoundTag2.getString(string));
+                        if (resolvedPage.length() > 32767) {
+                            return false;
+                        }
+
+                        newFilteredPages.putString(string, resolvedPage);
                     }
+
+                    compoundTag.put("filtered_pages", newFilteredPages);
                 }
 
+                compoundTag.put("pages", newPages);
+                // Paper end
                 return true;
             }
         } else {
